print(unique_labled_sources)
print(unique_labled_sources_tcp)
print(unique_labled_sources_udp)
print(unique_labled_sources_icmp)

""" for key, value in other_tcp.items():
    if key == '102.165.30.33':
        print(key, value) """

#for key, value in tcp_lport_scans.items():
  #  if key[0] == '89.248.165.33':
   #     print(f"Key: {key}, Value: {value}")

""" unique = set(key[0] for key in udp_lnetwork_scans.keys())
unique2 = set(key[0] for key in udp_lport_scans.keys())
unique3 = set(key for key in small_udps_final.keys())

print('port light')
print(len(unique2))
print('network light')
print(len(unique))
print('small')
print(len(unique3)) """

from collections import Counter

""" dst_port_counter_one_tcp = Counter()
print('tcp one flows')
# Loop over the dictionary and update the counter with each dst port
for key, value in tcp_oflow_final.items():
    dst_port = value['dst_port']
    dst_port_counter_one_tcp[dst_port] += 1

# Loop over the counter and print the dst ports with their corresponding counts
for dst_port, count_tcp_one in dst_port_counter_one_tcp.items():
    if count_tcp_one > 100: 
        print(f"dst_port {dst_port} is represented {count_tcp_one} times")

dst_port_counter_one_udp = Counter()
print('UDP one flows')
# Loop over the dictionary and update the counter with each dst port
for key, value in udp_oflow_final.items():
    dst_port = value['dst_port']
    dst_port_counter_one_udp[dst_port] += 1

# Loop over the counter and print the dst ports with their corresponding counts
for dst_port, count_udp_one in dst_port_counter_one_udp.items():
    if count_udp_one > 100: 
        print(f"dst_port {dst_port} is represented {count_udp_one} times") """
    
""" dst_port_counter_back_tcp = Counter()
print('TCP back')
# Loop over the dictionary and update the counter with each dst port
for key, value in small_syns_final.items():
    dst_ports = value['dst_ports']
    for dst_port in dst_ports:
        if isinstance(dst_port, int):
            dst_port_counter_back_tcp[dst_port] += 1
        else:
            for port in dst_port:
                dst_port_counter_back_tcp[port] += 1

# Loop over the counter and print the dst ports with their corresponding counts
for dst_port, count_tcp_bck in dst_port_counter_back_tcp.items():
    if count_tcp_bck > 100: 
        print(f"dst_port {dst_port} is represented {count_tcp_bck} times")

dst_port_counter_back_udp = Counter()
print('UDP back')
# Loop over the dictionary and update the counter with each dst port
for key, value in small_udps_final.items():
    dst_ports = value['dst_ports']
    for dst_port in dst_ports:
        if isinstance(dst_port, int):
            dst_port_counter_back_udp[dst_port] += 1
        else:
            for port in dst_port:
                dst_port_counter_back_udp[port] += 1

# Loop over the counter and print the dst ports with their corresponding counts
for dst_port, count_udp_bck in dst_port_counter_back_udp.items():
    if count_udp_bck > 100: 
        print(f"dst_port {dst_port} is represented {count_udp_bck} times") """
 




""" # Find multiple categorized traffic.
common_keys = set(key[0] for key in udp_lnetwork_scans.keys()) & set(key[0] for key in udp_lport_scans.keys())

extra_keys = set(key[0] for key in udp_lport_scans.keys()) & set(key[0] for key in udp_hport_scans.keys()) - common_keys

# find only in port scans
#for key in tcp_lport_scans.keys():
 #   if key[0] in extra_keys:
  #      value = tcp_lport_scans[key]
   #     print(key, value['num_packets'])



for key in common_keys:
    count_lnetwork = 0
    for key in tcp_lnetwork_scans.keys():
        if key[0] in common_keys:
            count_lnetwork += 1
    count_lport = 0
    for key in tcp_lport_scans.keys():
        if key[0] in common_keys:
            count_lport += 1

print(f'network: {count_lnetwork}')
print(f'port: {count_lport}') """

""" keys = [*tcp_hport_scans.keys(), *tcp_lport_scans.keys()]
tcp_port = set(tuple(key[0] for key in keys))
#tcp_port2 = [ip[0] for ip in tcp_port]
tcp_port_f = ', '.join(tcp_port)

keys = [*tcp_hnetwork_scans.keys(), *tcp_lnetwork_scans.keys()]
tcp_network = set(tuple(key[0] for key in keys))
#tcp_network2 = [ip[0] for ip in tcp_network]
tcp_network_f = ', '.join(tcp_network)

keys = [*tcp_oflow_final]
tcp_oflow = set(tuple(key[0] for key in keys))
#tcp_network2 = [ip[0] for ip in tcp_network]
tcp_oflow_f = ', '.join(tcp_oflow)

keys = [*tcp_bacsckatter_final]
tcp_back = set(tuple(key for key in keys))
#tcp_network2 = [ip[0] for ip in tcp_network]
tcp_back_f = ', '.join(tcp_back)

keys = [*small_syns_final]
tcp_small = set(tuple(key for key in keys))
#tcp_network2 = [ip[0] for ip in tcp_network]
tcp_small_f = ', '.join(tcp_small)

keys = [*other_tcp]
tcp_other1 = set(tuple(key for key in keys))
#tcp_network2 = [ip[0] for ip in tcp_network]
tcp_other_f = ', '.join(tcp_other1)

with open('tcp_port_fukuda.txt', 'w') as f:
    f.write(tcp_port_f)

with open('tcp_network_fukuda.txt', 'w') as f:
    f.write(tcp_network_f)

with open('tcp_oflow_fukuda.txt', 'w') as f:
    f.write(tcp_oflow_f)

with open('tcp_back_fukuda.txt', 'w') as f:
    f.write(tcp_back_f)

with open('tcp_small_fukuda.txt', 'w') as f:
    f.write(tcp_small_f)

with open('tcp_other_fukuda.txt', 'w') as f:
    f.write(tcp_other_f)

keys = [*udp_hport_scans.keys(), *udp_lport_scans.keys()]
udp_port = set(tuple(key[0] for key in keys))
#udp_port2 = [ip[0] for ip in udp_port]
udp_port_f = ', '.join(udp_port)

keys = [*udp_hnetwork_scans.keys(), *udp_lnetwork_scans.keys()]
udp_network = set(tuple(key[0] for key in keys))
#udp_network2 = [ip[0] for ip in udp_network]
udp_network_f = ', '.join(udp_network)

keys = [*udp_oflow_final]
udp_oflow = set(tuple(key[0] for key in keys))
#udp_network2 = [ip[0] for ip in udp_network]
udp_oflow_f = ', '.join(udp_oflow)

keys = [*udp_backscatter_final]
udp_back = set(tuple(key for key in keys))
#udp_network2 = [ip[0] for ip in udp_network]
udp_back_f = ', '.join(udp_back)

keys = [*small_udps_final]
udp_small = set(tuple(key for key in keys))
#udp_network2 = [ip[0] for ip in udp_network]
udp_small_f = ', '.join(udp_small)

keys = [*other_udp]
udp_other1 = set(tuple(key for key in keys))
#udp_network2 = [ip[0] for ip in udp_network]
udp_other_f = ', '.join(udp_other1)

with open('udp_port_fukuda.txt', 'w') as f:
    f.write(udp_port_f)

with open('udp_network_fukuda.txt', 'w') as f:
    f.write(udp_network_f)

with open('udp_oflow_fukuda.txt', 'w') as f:
    f.write(udp_oflow_f)

with open('udp_back_fukuda.txt', 'w') as f:
    f.write(udp_back_f)

with open('udp_small_fukuda.txt', 'w') as f:
    f.write(udp_small_f)

with open('udp_other_fukuda.txt', 'w') as f:
    f.write(udp_other_f)

keys = [*icmp_hnetwork_scans.keys(), *icmp_lnetwork_scans.keys()]
icmp_network = set(tuple(key for key in keys))
#icmp_network2 = [ip[0] for ip in icmp_network]
icmp_network_f = ', '.join(icmp_network)

keys = [*icmp_backscatter_final]
icmp_back = set(tuple(key for key in keys))
#icmp_network2 = [ip[0] for ip in icmp_network]
icmp_back_f = ', '.join(icmp_back)

keys = [*small_pings_final]
icmp_small = set(tuple(key for key in keys))
#icmp_network2 = [ip[0] for ip in icmp_network]
icmp_small_f = ', '.join(icmp_small)

keys = [*other_icmp]
icmp_other1 = set(tuple(key for key in keys))
#icmp_network2 = [ip[0] for ip in icmp_network]
icmp_other_f = ', '.join(icmp_other1)

with open('icmp_network_fukuda.txt', 'w') as f:
    f.write(icmp_network_f)

with open('icmp_back_fukuda.txt', 'w') as f:
    f.write(icmp_back_f)

with open('icmp_small_fukuda.txt', 'w') as f:
    f.write(icmp_small_f)

with open('icmp_other_fukuda.txt', 'w') as f:
    f.write(icmp_other_f) """

with open('december_fukuda_unique_src.txt', 'a') as f:
    f.write("---------------------\n")
    f.write('PCAP info:\n')
    f.write(f'Number of packets: {total_packets}\n')
    f.write(f'Number of src ips: {(len(ip_src))}\n')
    f.write(f'Labled src ips: {labled_sources}\n')
    f.write(f'Unique labled src ips: {unique_labled_sources}\n')
    f.write("---------------------\n")
    f.write('TCP info:\n')
    f.write(f'Unique labled TCP src ips: {unique_labled_sources_tcp}\n')
    f.write(f'TCP Heavy Port scans: {len(unique_tcp_hport_scans)}\n')
    f.write(f'TCP Light Port scans: {len(unique_tcp_lport_scans)}\n')
    f.write(f'TCP Heavy Network scans: {len(unique_tcp_hnetwork_scans)}\n')
    f.write(f'TCP Light Network scans: {len(unique_tcp_lnetwork_scans)}\n')
    f.write(f'TCP One Flows: {len(unique_tcp_one_flow)}\n')
    f.write(f'TCP Backscatter: {len(unique_tcp_back)}\n')
    f.write(f"TCP IP Fragement: {len(unique_tcp_fragment)}\n")
    f.write(f'TCP Small SYN: {len(unique_small_syns_final)}\n')
    f.write(f'Other TCP: {(len(unique_other_tcp))}\n')
    f.write("---------------------\n")
    f.write('UDP Info:\n')
    f.write(f'Unique labled UDP src ips: {unique_labled_sources_udp}\n')
    f.write(f'UDP Heavy Port scans: {len(unique_udp_hport_scans)}\n')
    f.write(f'UDP Light Port scans: {len(unique_udp_lport_scans)}\n')
    f.write(f'UDP Heavy Network scans: {len(unique_udp_hnetwork_scans)}\n')
    f.write(f'UDP Light Network scans: {len(unique_udp_lnetwork_scans)}\n')
    f.write(f'UDP One Flows: {len(unique_udp_one_flow)}\n')
    f.write(f'UDP Backscatter: {len(unique_udp_back)}\n')
    f.write(f"UDP IP Fragement: {len(unique_udp_fragment)}\n")
    f.write(f'UDP Small UDP: {len(unique_small_udps_final)}\n')
    f.write(f'Other UDP: {(len(unique_other_udp))}\n')
    f.write("---------------------\n")
    f.write('ICMP Info:\n')
    f.write(f'Unique labled ICMP src ips: {unique_labled_sources_icmp}\n')
    f.write(f'ICMP Heavy Network scans: {len(unique_icmp_hnetwork_scans)}\n')
    f.write(f'ICMP Light Network scans: {len(unique_icmp_lnetwork_scans)}\n')
    f.write(f'ICMP Backscatter: {len(unique_icmp_back)}\n')
    f.write(f"ICMP IP Fragement: {len(unique_icmp_fragment)}\n")
    f.write(f'Small Pings:  {len(unique_small_pings_final)}\n')
    f.write(f'Other ICMP: {(len(unique_other_icmp))}\n') 
    f.write("---------------------\n")
    #f.write(f'Other Traffic {other}\n')
    #f.write("---------------------\n") 

""" with open('tcp_heavy_port_scans_fukuda.txt', 'a') as f:
    f.write(str(tcp_hport_scans))
with open('tcp_light_port_scans_fukuda.txt', 'a') as f:   
    f.write(str(tcp_lport_scans))
with open('tcp_heavy_network_scans_fukuda.txt', 'a') as f:
    f.write(str(tcp_hnetwork_scans))
with open('tcp_light_network_scans_fukuda.txt', 'a') as f:   
    f.write(str(tcp_lnetwork_scans))
with open('tcp_one_flows_fukuda.txt', 'a') as f:
    f.write(str(tcp_oflow_final))
with open('tcp_backscatter_fukuda.txt', 'a') as f:
    f.write(str(tcp_bacsckatter_final))
with open('tcp_small_fukuda.txt', 'a') as f:
    f.write(str(small_syns_final))
with open('tcp_other_fukuda.txt', 'a') as f:
    f.write(str(other_tcp))

with open('udp_heavy_port_scans_fukuda.txt', 'a') as f:
    f.write(str(udp_hport_scans))
with open('udp_light_port_scans_fukuda.txt', 'a') as f:   
    f.write(str(udp_lport_scans))
with open('udp_heavy_network_scans_fukuda.txt', 'a') as f:
    f.write(str(udp_hnetwork_scans))
with open('udp_light_network_scans_fukuda.txt', 'a') as f:   
    f.write(str(udp_lnetwork_scans))
with open('udp_one_flows_fukuda.txt', 'a') as f:
    f.write(str(udp_oflow_final))
with open('fragment_fukuda.txt', 'a') as f:
    f.write(str(udp_fragment))
with open('udp_backscatter_fukuda.txt', 'a') as f:
    f.write(str(udp_backscatter_final))
with open('udp_small_fukuda.txt', 'a') as f:
    f.write(str(small_udps_final))
with open('udp_other_fukuda.txt', 'a') as f:
    f.write(str(other_udp))

with open('icmp_heavy_network_scans_fukuda.txt', 'a') as f:
    f.write(str(icmp_hnetwork_scans))
with open('icmp_light_network_scans_fukuda.txt', 'a') as f:   
    f.write(str(icmp_lnetwork_scans))
with open('icmp_backscatter_fukuda.txt', 'a') as f:
    f.write(str(icmp_backscatter_final))
with open('icmp_small_fukuda.txt', 'a') as f:
    f.write(str(small_pings_final))
with open('icmp_other_fukuda.txt', 'a') as f:
    f.write(str(other_icmp))
 """